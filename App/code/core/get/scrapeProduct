import cheerio from 'cheerio';
var stringSimilarity = require('string-similarity')

const pinLocalFunc = (htmlBody, notBaseURL) => {
  const imageDownloader = {
    // Source: https://support.google.com/webmasters/answer/2598805?hl=en
    // no gif, no png no svg
    imageRegex: /(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*\.(?:bmp|jpe?g|webp))(?:\?([^#]*))?(?:#(.*))?/i,
  
    extractImagesFromTags(dol) {
      return imageDownloader.removeDuplicateOrEmpty(
        [].slice
          .apply(dol("img, a, [style]"))
          .map(imageDownloader.extractImageFromElement)
      );
    },
  
    extractImageFromElement(element) {
      if (element.name.toLowerCase() === "img") {
        let src = element.attribs.src || element.attribs["data-src"];
        if (src !== undefined && src !== "") {
          const hashIndex = src.indexOf("#");
          if (hashIndex >= 0) {
            src = src.substr(0, hashIndex);
          }
        }
        return { img: src || "", desc: element.attribs.alt || "" };
      }
  
      return "";
    },
  
    extractURLFromStyle(url) {
      return url.replace(/^url\(["']?/, "").replace(/["']?\)$/, "");
    },
  
    isImageURL(url) {
      return (
        // url.indexOf("data:image") === 0 || 
        imageDownloader.imageRegex.test(url)
      );
    },
  
    relativeUrlToAbsolute(url) {
      if (url.indexOf("/") === 0) {
        // const index = global.notBaseURL.indexOf(".com") + 4;
        const index = notBaseURL.indexOf(".com") + 4;
        // return global.notBaseURL.substring(0, index).concat(url);
        return notBaseURL.substring(0, index).concat(url);
      } else if (!url.includes('http')){
        const index = notBaseURL.indexOf(".com") + 4;
        return notBaseURL.substring(0, index).concat("/"+url);
      }
      else {
        return url;
      }
    },
  
    removeDuplicateOrEmpty(images) {
      let hash = new Map();
      for (let i = 0; i < images.length; i++) {
        hash.set(images[i].img, images[i].desc);
      }
      const result = [];
      for (let [key, val] of hash) {
        if (key !== "") {
          result.push({ img: key, desc: val || "" });
        }
      }
  
      return result;
    },

    getImageUrl($, title) {
      var imageUrl = $('meta[property="og:image:secure_url"]').attr("content");
      var imageUrl = $('meta[property="og:image"]').attr("content");
      var images = imageDownloader.extractImagesFromTags($);
      images.push({img: imageUrl});
      if (!imageUrl && title) {
        const best = stringSimilarity.findBestMatch(
          title || "",
          images.map(function (element) {
            return element.desc || "";
          })
        );
  
        if (best.bestMatch.rating == 0) {
          imageUrl = images[0].img;
        } else {
          imageUrl = images[best.bestMatchIndex].img;
        }
      }
      images = images.filter((item)=>{
        return item.img !== undefined;
      })
      images = images.map((item)=>{
        const url = item.img;
        if (url !== undefined && url.indexOf("?")>-1) {
          return url.split("?")[0];
        } else {
          return url;
        }
      })
      .map((url)=> {
        const clean = url.replace(/^\/+|\/$/g, '');
        if (clean.includes(".com")) { // absolute url
          if (!clean.startsWith("http")) {
  
            return "https://" + clean;
          } else {
            return clean;
          }
        } else {  // relative url
          if (clean.startsWith("data")) {
            return clean;
          }
          const index = notBaseURL.indexOf(".com") + 4;
          // return global.notBaseURL.substring(0, index).concat(url);
          return notBaseURL.substring(0, index).concat("/" +clean);
        }
      }).filter((url)=>!url.startsWith("data:"));
      console.log("imageSet", images,)
      return {image: imageUrl, imageSet: images};
    }
  };
  

  const getPriceTitleImage = ($) => {
    var price:string;
    var title:string;

    price = $("meta")
      .filter(function () {
        return (
          $(this).attr("property") != null &&
          $(this).attr("property").endsWith("price:amount")
        );
      })
      .attr("content");
    if (!price) {
      price = $("span:contains($), div:contains($)")
        .filter(function () {
          const lengthBool =
            $(this).text().length > 2 && $(this).text().length < 20;
          const element = $(this)[0];
          const maxDepth = 6;
          const recurse = (el, depth = 0) => {
            if (el?.parent === null || el?.parent === undefined) {
              return true;
            } else {
              if (el.parent.name === "a") {
                return false;
              } else {
                return recurse(el?.parent, depth + 1);
              }
            }
          };

          return lengthBool && recurse(element);
        })
        .text()
        .trim();
    }
    const prices = price.split('$');
    if (prices[0] === "" && prices.length > 1) {
      price = prices[1];
    }

    title =
    $("meta[property='og:title']").attr("content") ||
      $("meta")
        .filter(function () {
          return (
            ($(this).attr("property") != null &&
              $(this).attr("property").endsWith("title")) ||
            ($(this).attr("name") != null &&
              $(this).attr("name").endsWith("title"))
          );
        })
        .attr("content") ||

      $("title").text() ||
      $('meta[name="keywords"]').attr("content");

      console.log('before getimageurl', title);
      var {image: imageUrl, imageSet: imageSet} = imageDownloader.getImageUrl($, title)
      imageUrl = imageDownloader.relativeUrlToAbsolute((imageUrl || "").trim());


    return {image: imageUrl, imageSet: imageSet, price: price, title: title};
}
  var $ = cheerio.load(htmlBody);

const {price: price, image: imageUrl, title: title, imageSet: imageSet} = getPriceTitleImage($);
// var tempBrand = notBaseURL.split('.com')[0].split(".");
// if (tempBrand[1] === undefined) {
//   const http = tempBrand[0].split("//")[1];
//   if (http !== undefined) {
//     tempBrand=http;
//   }
// } else {
//   tempBrand = tempBrand[1];
// }
const data = {
  url: notBaseURL,
  title: title.trim().split(/[^/\S ]/)[0],
  image: imageUrl.indexOf("?")>-1?imageUrl.split("?")[0]:imageUrl,
  price: price.split("\n")[0],
  imageSet: imageSet,
};
// console.log(data);
return data;
}

export default pinLocalFunc;